//
//  UserPoolSignUpConfirmationViewController.swift
//  MySampleApp
//
//
// Copyright 2017 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.
//
// Code generated by AWS Mobile Hub. Amazon gives unlimited permission to 
// copy, distribute and modify it.
//
// Source code generated from template: aws-my-sample-app-ios-swift v0.16
//
//

import Foundation
import UIKit
import AWSCognitoIdentityProvider
import AWSMobileHubHelper

class UserPoolSignUpConfirmationViewController : UIViewController {
    
    var sentTo: String?
    var user: AWSCognitoIdentityUser?
    var userNameRow: FormTableCell?
    var confirmationCodeRow: FormTableCell?
    var tableDelegate: FormTableDelegate?
    
    @IBOutlet weak var tableFormView: UIView!
    @IBOutlet weak var tableView: UITableView!

    override func viewDidLoad() {
        super.viewDidLoad()
        self.setUp()
    }
    
    func setUp() {
        
        userNameRow = FormTableCell(placeHolder: "User Name", staticText: self.user!.username!)
        confirmationCodeRow = FormTableCell(placeHolder: "Confirmation Code", type: InputType.text)
        
        tableDelegate = FormTableDelegate()
        tableDelegate?.add(cell: userNameRow!)
        tableDelegate?.add(cell: confirmationCodeRow!)
        tableView?.delegate = tableDelegate
        tableView?.dataSource = tableDelegate
        tableView.reloadData()
        
        UserPoolsUIHelper.setUpFormShadow(view: tableFormView)
        
        self.setUpBackground()
    }
    
    
    func setUpBackground() {
        self.view.backgroundColor = UIColor.white
        let backgroundImageView = UIImageView(frame: CGRect(x: 0, y:0, width: self.view.frame.width, height: self.tableFormView.center.y))
        backgroundImageView.backgroundColor = backgroundImageColor
        backgroundImageView.autoresizingMask = UIViewAutoresizing.flexibleWidth
        self.title = "Confirm Account"
        self.view.insertSubview(backgroundImageView, at: 0)
    }
    
    @IBAction func onConfirmCode(_ sender: UIButton) {

        guard let confirmationCodeValue = self.tableDelegate?.getValue(tableView, for: confirmationCodeRow!), !confirmationCodeValue.isEmpty else {
            let alert = UIAlertController(title: "Confirmation code missing.",
                                          message: "Please enter a valid confirmation code.",
                                          preferredStyle: .alert)
            alert.addAction(UIAlertAction(title: "Ok", style: .default, handler: nil))
            self.present(alert, animated: true, completion:nil)
            return
        }
        self.user?.confirmSignUp(confirmationCodeValue, forceAliasCreation: true).continueWith(block: {[weak self] (task: AWSTask) -> AnyObject? in
            guard let strongSelf = self else { return nil }
            DispatchQueue.main.async(execute: { 
                if let error = task.error {
                    let nserror = error as NSError
                    let alert = UIAlertController(title: nserror.userInfo["__type"] as? String,
                                                  message:nserror.userInfo["message"] as? String,
                                                  preferredStyle: .alert)
                    alert.addAction(UIAlertAction(title: "Ok", style: .default, handler: nil))
                    strongSelf.present(alert, animated: true, completion:nil)
                } else {
                    let alert = UIAlertController(title: "Registration Complete",
                                                  message: "Registration was successful.",
                                                  preferredStyle: .alert)
                    
                    alert.addAction(UIAlertAction(title: "Ok", style: .default, handler: {(action) in
                        let _ = self?.navigationController?.popToRootViewController(animated: true)
                    }))
                    strongSelf.present(alert, animated: true, completion: nil)
                }
            })
            return nil
        })
    }
    
    
    @IBAction func onResendConfirmationCode(_ sender: AnyObject) {
        self.user?.resendConfirmationCode().continueWith(block: {[weak self] (task: AWSTask<AWSCognitoIdentityUserResendConfirmationCodeResponse>) -> AnyObject? in
            guard let strongSelf = self else { return nil }
            DispatchQueue.main.async(execute: { 
                if let error = task.error {
                    let nserror = error as NSError
                    let alert = UIAlertController(title: nserror.userInfo["__type"] as? String,
                                                  message:nserror.userInfo["message"] as? String,
                                                  preferredStyle: .alert)
                    alert.addAction(UIAlertAction(title: "Ok", style: .default, handler: nil))
                    strongSelf.present(alert, animated: true, completion:nil)
                } else if let result = task.result as AWSCognitoIdentityUserResendConfirmationCodeResponse! {
                    let alert = UIAlertController(title: "Code Resent",
                                                  message: "Code resent to \(result.codeDeliveryDetails!.destination!)",
                                                  preferredStyle: .alert)
                    alert.addAction(UIAlertAction(title: "Ok", style: .default, handler: nil))
                    strongSelf.present(alert, animated: true, completion:nil)
                }
            })
            return nil
        })
    }
    
}
