//
//  UserPoolNewPasswordViewController.swift
//  MySampleApp
//
//
// Copyright 2017 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.
//
// Code generated by AWS Mobile Hub. Amazon gives unlimited permission to 
// copy, distribute and modify it.
//
// Source code generated from template: aws-my-sample-app-ios-swift v0.16
//
//

import Foundation
import AWSCognitoIdentityProvider
import AWSMobileHubHelper

class UserPoolNewPasswordViewController: UIViewController {
    
    var user: AWSCognitoIdentityUser?
    
    @IBOutlet weak var tableFormView: UIView!
    @IBOutlet weak var tableView: UITableView!
    var newPasswordRow: FormTableCell?
    var confirmationCodeRow: FormTableCell?
    var tableDelegate: FormTableDelegate?
    
    override func viewDidLoad() {
        super.viewDidLoad()
        self.setUp()
    }
    
    func setUp() {
        newPasswordRow = FormTableCell(placeHolder: "New Password", type: InputType.password)
        confirmationCodeRow = FormTableCell(placeHolder: "Confirmation Code", type: InputType.text)
        
        tableDelegate = FormTableDelegate()
        tableDelegate?.add(cell: newPasswordRow!)
        tableDelegate?.add(cell: confirmationCodeRow!)
        tableView?.delegate = tableDelegate
        tableView?.dataSource = tableDelegate
        tableView.reloadData()
        UserPoolsUIHelper.setUpFormShadow(view: tableFormView)
        self.setUpBackground()
    }
    
    
    func setUpBackground() {
        self.view.backgroundColor = UIColor.white
        let backgroundImageView = UIImageView(frame: CGRect(x: 0, y:0, width: self.view.frame.width, height: self.tableFormView.center.y))
        backgroundImageView.autoresizingMask = UIViewAutoresizing.flexibleWidth
        backgroundImageView.backgroundColor = backgroundImageColor
        self.view.insertSubview(backgroundImageView, at: 0)
    }
    
    @IBAction func onUpdatePassword(_ sender: AnyObject) {
        guard let confirmationCodeValue = self.tableDelegate?.getValue(tableView, for: confirmationCodeRow!),
            let passwordValue = self.tableDelegate?.getValue(tableView, for: confirmationCodeRow!),
            !confirmationCodeValue.isEmpty, !passwordValue.isEmpty else {
            let alert = UIAlertController(title: "Missing Information",
                                          message: "Please fill all the specified fields below.",
                                          preferredStyle: .alert)
            alert.addAction(UIAlertAction(title: "Ok", style: .default, handler: nil))
            self.present(alert, animated: true, completion:nil)
            
            return
        }
        //confirm forgot password with input from ui.
        _ = self.user?.confirmForgotPassword(confirmationCodeValue, password: (self.tableDelegate?.getValue(tableView, for: newPasswordRow!)!)!).continueWith(block: {[weak self] (task: AWSTask) -> AnyObject? in
            guard let strongSelf = self else { return nil }
            DispatchQueue.main.async(execute: { 
                if let error = task.error {
                    let nserror = error as NSError
                    let alert = UIAlertController(title: nserror.userInfo["__type"] as? String,
                                                  message:nserror.userInfo["message"] as? String,
                                                  preferredStyle: .alert)
                    alert.addAction(UIAlertAction(title: "Ok", style: .default, handler: nil))
                    strongSelf.present(alert, animated: true, completion:nil)
                } else {
                    let alert = UIAlertController(title: "Password Reset Complete",
                                                  message: "Password Reset was completed successfully.",
                                                  preferredStyle: .alert)
                    alert.addAction(UIAlertAction(title: "Ok", style: .default, handler: {(action) in
                        _ = strongSelf.navigationController?.popToRootViewController(animated: true)
                    }))
                    strongSelf.present(alert, animated: true, completion: nil)
                }
            })
            return nil
        })
    }
    
}
